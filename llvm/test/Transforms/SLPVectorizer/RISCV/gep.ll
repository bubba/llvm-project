; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=slp-vectorizer -mtriple=riscv64 -mattr=+v \
; RUN: -riscv-v-slp-max-vf=0 -S | FileCheck %s

; This should not be vectorized as the extra cost of the address computation
; that can't be folded into the vle8/vse8 outweighs the scalar cost.

define void @copy_with_offset_v2i8(ptr noalias %p, ptr noalias %q) {
; CHECK-LABEL: @copy_with_offset_v2i8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[P1:%.*]] = getelementptr i8, ptr [[P:%.*]], i32 8
; CHECK-NEXT:    [[X1:%.*]] = load i8, ptr [[P1]], align 1
; CHECK-NEXT:    [[Q1:%.*]] = getelementptr i8, ptr [[Q:%.*]], i32 16
; CHECK-NEXT:    store i8 [[X1]], ptr [[Q1]], align 1
; CHECK-NEXT:    [[P2:%.*]] = getelementptr i8, ptr [[P]], i32 9
; CHECK-NEXT:    [[X2:%.*]] = load i8, ptr [[P2]], align 1
; CHECK-NEXT:    [[Q2:%.*]] = getelementptr i8, ptr [[Q]], i32 17
; CHECK-NEXT:    store i8 [[X2]], ptr [[Q2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  %p1 = getelementptr i8, ptr %p, i32 8
  %x1 = load i8, ptr %p1
  %q1 = getelementptr i8, ptr %q, i32 16
  store i8 %x1, ptr %q1

  %p2 = getelementptr i8, ptr %p, i32 9
  %x2 = load i8, ptr %p2
  %q2 = getelementptr i8, ptr %q, i32 17
  store i8 %x2, ptr %q2

  ret void
}
